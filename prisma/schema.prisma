// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  rol Rol

  accounts Account[]
  sessions Session[]
  reservas Reserva[]

  @@map("users")
}

enum Rol {
  ADMIN
  USUARIO
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Library system models

model Libro {
  id                Int      @id @default(autoincrement())
  titulo            String
  autor             String
  editorial         String
  isbn              String   @unique
  totalCopias       Int
  copiasDisponibles Int
  resumen           String?
  fechaPublicacion  DateTime
  imagenPortada     String?
  categoria         String

  copias   CopiaLibro[]
  reservas Reserva[]
}

model CopiaLibro {
  id          Int         @id @default(autoincrement())
  libroId     Int
  codigoCopia String      @unique
  estado      EstadoCopia
  ubicacion   String

  libro Libro @relation(fields: [libroId], references: [id], onDelete: Cascade)
}

enum EstadoCopia {
  DISPONIBLE
  RESERVADA
  PERDIDA
  DANADA
}

model Reserva {
  id              Int           @id @default(autoincrement())
  usuarioId       String
  libroId         Int
  fechaReserva    DateTime
  fechaDevolucion DateTime
  estado          EstadoReserva

  usuario User  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  libro   Libro @relation(fields: [libroId], references: [id], onDelete: Cascade)
}

enum EstadoReserva {
  ACTIVA
  DEVUELTA
  CANCELADA
}
